/*
 * GoCardless Bank Account Data API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0 (v2)
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionSchema {
    /// transactionId
    #[serde(rename = "transactionId", skip_serializing_if = "Option::is_none")]
    pub transaction_id: Option<String>,
    /// entryReference
    #[serde(rename = "entryReference", skip_serializing_if = "Option::is_none")]
    pub entry_reference: Option<String>,
    /// endToEndId
    #[serde(rename = "endToEndId", skip_serializing_if = "Option::is_none")]
    pub end_to_end_id: Option<String>,
    /// mandateId
    #[serde(rename = "mandateId", skip_serializing_if = "Option::is_none")]
    pub mandate_id: Option<String>,
    /// checkId
    #[serde(rename = "checkId", skip_serializing_if = "Option::is_none")]
    pub check_id: Option<String>,
    /// creditorId
    #[serde(rename = "creditorId", skip_serializing_if = "Option::is_none")]
    pub creditor_id: Option<String>,
    /// bookingDate
    #[serde(rename = "bookingDate", skip_serializing_if = "Option::is_none")]
    pub booking_date: Option<String>,
    /// valueDate
    #[serde(rename = "valueDate", skip_serializing_if = "Option::is_none")]
    pub value_date: Option<String>,
    /// bookingDateTime
    #[serde(rename = "bookingDateTime", skip_serializing_if = "Option::is_none")]
    pub booking_date_time: Option<String>,
    /// valueDateTime
    #[serde(rename = "valueDateTime", skip_serializing_if = "Option::is_none")]
    pub value_date_time: Option<String>,
    #[serde(rename = "transactionAmount")]
    pub transaction_amount: Box<crate::models::TransactionAmountSchema>,
    #[serde(rename = "currencyExchange", skip_serializing_if = "Option::is_none")]
    pub currency_exchange: Option<Vec<crate::models::CurrencyExchangeSchema>>,
    /// creditorName
    #[serde(rename = "creditorName", skip_serializing_if = "Option::is_none")]
    pub creditor_name: Option<String>,
    #[serde(rename = "creditorAccount", skip_serializing_if = "Option::is_none")]
    pub creditor_account: Option<Box<crate::models::AccountSchema>>,
    /// ultimateCreditor
    #[serde(rename = "ultimateCreditor", skip_serializing_if = "Option::is_none")]
    pub ultimate_creditor: Option<String>,
    /// debtorName
    #[serde(rename = "debtorName", skip_serializing_if = "Option::is_none")]
    pub debtor_name: Option<String>,
    #[serde(rename = "debtorAccount", skip_serializing_if = "Option::is_none")]
    pub debtor_account: Option<Box<crate::models::AccountSchema>>,
    /// ultimateDebtor
    #[serde(rename = "ultimateDebtor", skip_serializing_if = "Option::is_none")]
    pub ultimate_debtor: Option<String>,
    /// remittanceInformationUnstructured
    #[serde(rename = "remittanceInformationUnstructured", skip_serializing_if = "Option::is_none")]
    pub remittance_information_unstructured: Option<String>,
    /// remittanceInformationUnstructuredArray
    #[serde(rename = "remittanceInformationUnstructuredArray", skip_serializing_if = "Option::is_none")]
    pub remittance_information_unstructured_array: Option<Vec<String>>,
    /// remittanceInformationStructured
    #[serde(rename = "remittanceInformationStructured", skip_serializing_if = "Option::is_none")]
    pub remittance_information_structured: Option<String>,
    /// remittanceInformationStructuredArray
    #[serde(rename = "remittanceInformationStructuredArray", skip_serializing_if = "Option::is_none")]
    pub remittance_information_structured_array: Option<Vec<String>>,
    /// additionalInformation
    #[serde(rename = "additionalInformation", skip_serializing_if = "Option::is_none")]
    pub additional_information: Option<String>,
    /// purposeCode
    #[serde(rename = "purposeCode", skip_serializing_if = "Option::is_none")]
    pub purpose_code: Option<String>,
    /// bankTransactionCode
    #[serde(rename = "bankTransactionCode", skip_serializing_if = "Option::is_none")]
    pub bank_transaction_code: Option<String>,
    /// proprietaryBankTransactionCode
    #[serde(rename = "proprietaryBankTransactionCode", skip_serializing_if = "Option::is_none")]
    pub proprietary_bank_transaction_code: Option<String>,
    /// internalTransactionId
    #[serde(rename = "internalTransactionId", skip_serializing_if = "Option::is_none")]
    pub internal_transaction_id: Option<String>,
}

impl TransactionSchema {
    pub fn new(transaction_amount: crate::models::TransactionAmountSchema) -> TransactionSchema {
        TransactionSchema {
            transaction_id: None,
            entry_reference: None,
            end_to_end_id: None,
            mandate_id: None,
            check_id: None,
            creditor_id: None,
            booking_date: None,
            value_date: None,
            booking_date_time: None,
            value_date_time: None,
            transaction_amount: Box::new(transaction_amount),
            currency_exchange: None,
            creditor_name: None,
            creditor_account: None,
            ultimate_creditor: None,
            debtor_name: None,
            debtor_account: None,
            ultimate_debtor: None,
            remittance_information_unstructured: None,
            remittance_information_unstructured_array: None,
            remittance_information_structured: None,
            remittance_information_structured_array: None,
            additional_information: None,
            purpose_code: None,
            bank_transaction_code: None,
            proprietary_bank_transaction_code: None,
            internal_transaction_id: None,
        }
    }
}


